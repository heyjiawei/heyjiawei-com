{"componentChunkName":"component---src-templates-blog-post-js","path":"/how-to-read-css-specification-syntax","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"Heyjiawei Blog"}},"markdownRemark":{"id":"1ed0abf0-3bff-5b6e-a604-08667c1d287c","excerpt":"Sometime back, I had to create this perforated gap with CSS. I wanted to use CSS background shorthand property but I didn’t know how to read it’s cryptic Formal…","html":"<p>Sometime back, I had to create this <a href=\"https://codepen.io/heyjiawei/pen/yLepYXj\" target=\"_blank\">perforated gap</a> with CSS. I wanted to use CSS background shorthand property but I didn’t know how to read it’s cryptic <strong>Formal syntax</strong> section.</p>\n<p>After some googling, it turns out this syntax is called <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Value_definition_syntax\" target=\"_blank\">Value Definition Syntax</a>. So here is my notes on how to read Value Definition Syntax.</p>\n<p>Before we jump into my notes, I would like to clarify that I have read from both the <a href=\"https://www.w3.org/TR/css3-values/#value-defs\" target=\"_blank\">specification</a> and MDN’s summarised version of Value Definition Syntax. I felt that reading both gave me more clarity than just reading either and hence, if you do wish to learn how to read Value Definition Syntax, I would recommend you read both documents.</p>\n<p>Before we can jump into <code class=\"language-text\">[ ] &amp;&amp; * +</code>, we need to know how to read the words used together with these symbols. These words are called component value types.</p>\n<h2 id=\"component-value-types\" style=\"position:relative;\"><a href=\"#component-value-types\" aria-label=\"component value types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Component Value Types</h2>\n<p><strong>keywords</strong> - Are predefined literals. They have no quotes.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">height: auto</code></pre></div>\n<p><em>auto</em> is a keyword. It has no quotes and its a predefined literal in CSS. Other common keywords are <em>inherit</em>, <em>initial</em> and <em>unset</em>.</p>\n<p><strong>literals</strong> - “literally mean what their character mean”</p>\n<p><code class=\"language-text\">/</code> can refer to the math division symbol. And it can also refer to the CSS shorthand syntax, which separates values that are semantically different but have a common syntax. I understand this with the example of background-position and background-size. Both stem from background but are different.</p>\n<p><code class=\"language-text\">,</code> separates values as you enumerate a list of values.</p>\n<h3 id=\"data-types\" style=\"position:relative;\"><a href=\"#data-types\" aria-label=\"data types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Data Types</h3>\n<p>Data types are separated into 2 types, the basic data types like <code class=\"language-text\">&lt;string&gt;</code>, <code class=\"language-text\">&lt;angle&gt;</code> and the non-terminal data types. I couldn’t understand the explanation of non-terminal data types but I think non-terminal data types are as follows:</p>\n<ol>\n<li>They are data types that share the same name of a property. But are put between quotes. E.g. <code class=\"language-text\">&lt;&#39;border-width&#39;&gt;</code>. This syntax actually defines the value of <code class=\"language-text\">border-width</code> property.</li>\n<li>The ones without quotes, e.g. <code class=\"language-text\">&lt;border-width&gt;</code> will be expanded later in the specification document. <strong>Basically, if you don’t see quotes within the angular brackets, then they aren’t the full definition</strong></li>\n</ol>\n<p><strong>Update on 28th July 2020:</strong> To understand non-terminal, you have to understand that <a href=\"https://en.wikipedia.org/wiki/Terminal_and_nonterminal_symbols\" target=\"_blank\">terminal and non-terminal are a pair</a>. Non-terminal means that the term can be replaced. Terminal means that it terminates. <a href=\"https://stackoverflow.com/questions/57908662/what-are-terminal-and-nonterminal-symbols\" target=\"_blank\">This stackover flow question paints a good mental picture.</a> Basically, as <a href=\"https://twitter.com/jyee721/status/1287921240494071808\" target=\"_blank\">@jyee721</a> puts it, <em>terminal is a constant value and non-terminal is a variable.</em></p>\n<p>Now that we have the component value types, we need to know how to combine them and the component value combinators does exactly that.</p>\n<h2 id=\"component-value-combinators\" style=\"position:relative;\"><a href=\"#component-value-combinators\" aria-label=\"component value combinators permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Component Value Combinators</h2>\n<p>This section felt similar to boolean operators in JavaScript.</p>\n<h3 id=\"brackets\" style=\"position:relative;\"><a href=\"#brackets\" aria-label=\"brackets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Brackets</h3>\n<p>Brackets are used to group components to bypass precendence rules. This is akin to <code class=\"language-text\">()</code> in JavaScript evaluation.</p>\n<h3 id=\"juxtaposition\" style=\"position:relative;\"><a href=\"#juxtaposition\" aria-label=\"juxtaposition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Juxtaposition</h3>\n<p>I would reword this to “Positioning matters”. The term “Juxtaposing components” means that all components must occur in the exact order as stated in the syntax.</p>\n<h3 id=\"double-ampersand-\" style=\"position:relative;\"><a href=\"#double-ampersand-\" aria-label=\"double ampersand  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Double ampersand &#x26;&#x26;</h3>\n<p>This symbol appears between 2 components <code class=\"language-text\">bold &amp;&amp; &lt;length&gt;</code> and it means that these 2 components are <strong>mandatory</strong> but <strong>their order doesn’t matter</strong>. So <code class=\"language-text\">bold &amp;&amp; &lt;length&gt;</code> is equivalent to <code class=\"language-text\">&lt;length&gt; &amp;&amp; bold</code>.</p>\n<h3 id=\"double-bar-\" style=\"position:relative;\"><a href=\"#double-bar-\" aria-label=\"double bar  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Double bar ||</h3>\n<p>This symbol appears between 2 <em>options</em>. The term <em>option</em> is used because <strong>at least 1 option needs to be present</strong>. This means that more than 1 option can be used too! Oh, and <strong>their order doesn’t matter</strong>.</p>\n<h3 id=\"single-bar-\" style=\"position:relative;\"><a href=\"#single-bar-\" aria-label=\"single bar  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Single bar |</h3>\n<p>This symbol appears between 2 alternatives because <strong>only 1</strong> of them <strong>must be present</strong>.</p>\n<h3 id=\"precedence-of-component-value-combinators\" style=\"position:relative;\"><a href=\"#precedence-of-component-value-combinators\" aria-label=\"precedence of component value combinators permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Precedence of Component Value Combinators</h3>\n<p>Like mathematics, component value combinators also follow a precedence rule.</p>\n<ul>\n<li>Juxtaposition has precedence over the double ampersand</li>\n</ul>\n<p><code class=\"language-text\">bold thin &amp;&amp; &lt;length&gt;</code> is equivalent to <code class=\"language-text\">[ bold thin ] &amp;&amp; &lt;length&gt;</code>.</p>\n<ul>\n<li>&#x26;&#x26; has precendence over ||</li>\n</ul>\n<p><code class=\"language-text\">bold || thin &amp;&amp; &lt;length&gt;</code> is equivalent to <code class=\"language-text\">bold || [ thin &amp;&amp; &lt;length&gt; ]</code></p>\n<ul>\n<li>|| has precendence over |</li>\n</ul>\n<p>But that’s not all. Remember those pesky <code class=\"language-text\">? * +</code> operators? Yeah they mean something too. I find them similar to regex operators.</p>\n<h2 id=\"component-value-multipliers\" style=\"position:relative;\"><a href=\"#component-value-multipliers\" aria-label=\"component value multipliers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Component Value Multipliers</h2>\n<p>These operators are called multipliers for they indicate how many times the type/keyword/bracketed group may be repeated. <strong>If there is no multiplier, the entity must appear exactly one time.</strong> Also, multipliers have <strong>precendence over all combinators</strong>.</p>\n<h3 id=\"asterisk-\" style=\"position:relative;\"><a href=\"#asterisk-\" aria-label=\"asterisk  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Asterisk *</h3>\n<p>The <code class=\"language-text\">*</code> indicates that the preceding type, word, or group can occur zero, 1 or more times.</p>\n<h3 id=\"plus-\" style=\"position:relative;\"><a href=\"#plus-\" aria-label=\"plus  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Plus +</h3>\n<p>The <code class=\"language-text\">+</code> indicates that the preceding type, word or group can occur 1 or more times.</p>\n<h3 id=\"question-mark-\" style=\"position:relative;\"><a href=\"#question-mark-\" aria-label=\"question mark  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Question mark ?</h3>\n<p>The <code class=\"language-text\">?</code> indicates that the preceding type, word, or group is optional. This means they can occur zero or 1 time.</p>\n<h3 id=\"curly-braces--\" style=\"position:relative;\"><a href=\"#curly-braces--\" aria-label=\"curly braces   permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Curly braces { }</h3>\n<p>The <code class=\"language-text\">{ }</code> indicates a range. If there is a digit within it, e.g. <code class=\"language-text\">{3}</code>, the preceding type, word or group will occur 3 times.</p>\n<p>If there is a comma-separated pair of number, e.g. <code class=\"language-text\">{4,6}</code>, it indicates that the preceding type, word, or group must occur at <em>at least</em> 4 times and <em>at most</em> 6 times.</p>\n<p>If you have a single digit and a comma like so <code class=\"language-text\">{4,}</code> it indicates that there must be at least 4 repetitions, with no upper bound on the number of repetitions. But the CSS specs also declared that User Agents must support at least 20 repetitions of the component. If a property value contains more than the supported number of repetitions, the declaration will be ignored as if it were invalid.</p>\n<p>And there is no <code class=\"language-text\">{,4}</code>.</p>\n<h3 id=\"hash-\" style=\"position:relative;\"><a href=\"#hash-\" aria-label=\"hash  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hash #</h3>\n<p>The <code class=\"language-text\">#</code> indicates that the preceding type, word, or group occurs 1 or more times, separated by comma tokens. The white space surrounding the commas are optional.</p>\n<p>The <code class=\"language-text\">#</code> may optionally be followed by <code class=\"language-text\">{ }</code> to indicate precisely how many times the repetition occurs, like <code class=\"language-text\">&lt;length&gt;#{1,4}</code>. This means <code class=\"language-text\">&lt;length&gt;</code> can appear 1 to 4 times, and on each appearance, it has to be separated by comma.</p>\n<p>e.g. <code class=\"language-text\">&lt;length&gt;, &lt;length&gt;, &lt;length&gt;</code></p>\n<h3 id=\"exclamation-\" style=\"position:relative;\"><a href=\"#exclamation-\" aria-label=\"exclamation  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exclamation !</h3>\n<p>Indicates that the group is required and there must be at least 1 value. Even if the grammar of the items within the group allows the entire contents to be omitted, like <code class=\"language-text\">[ bold? smaller? ]</code> where you can skip the whole group; adding <code class=\"language-text\">!</code> means at least 1 component value must exist.</p>\n<p><code class=\"language-text\">[ bold? smaller? ]!</code> would hence match</p>\n<ul>\n<li><code class=\"language-text\">bold</code></li>\n<li><code class=\"language-text\">smaller</code></li>\n<li><code class=\"language-text\">bold smaller</code></li>\n</ul>\n<p>Unless otherwise specified, white space and/or comments may appear before, after, and/or between components combined using the above combinators and multipliers.</p>\n<h2 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h2>\n<ul>\n<li>combinators are tied to <em>order</em> and <em>presence</em></li>\n<li>multipliers are tied to <em>frequency</em></li>\n</ul>\n<p>From the specs, the <a href=\"https://www.w3.org/TR/css3-values/#combinator-multiplier-patterns\" target=\"_blank\">section on Combinator and Multiplier Patterns</a> shows that there are a small set of common ways to combine multiple independent component values in particular numbers and orders.</p>","frontmatter":{"title":"How to read the CSS specification syntax, a.k.a. CSS Property value syntax","date":"July 26, 2020","description":"How to read that [<bg-layer># ,]? <final-bg-layer> CSS syntax"}}},"pageContext":{"slug":"/how-to-read-css-specification-syntax","previous":{"fields":{"slug":"/about-uri-scheme"},"frontmatter":{"title":"about URI Scheme"}},"next":{"fields":{"slug":"/block-user-from-leaving-page-on-single-page-app"},"frontmatter":{"title":"How to block user from leaving a page on a single page app"}}}}}