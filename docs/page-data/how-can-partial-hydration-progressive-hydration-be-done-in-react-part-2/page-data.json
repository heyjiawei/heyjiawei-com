{"componentChunkName":"component---src-templates-blog-post-js","path":"/how-can-partial-hydration-progressive-hydration-be-done-in-react-part-2","result":{"data":{"site":{"siteMetadata":{"title":"Heyjiawei Blog"}},"markdownRemark":{"id":"05cc98ab-fa64-5543-92da-fb86ee7586bb","excerpt":"Before we begin, there is no agreed upon method as of this writing of how to progressively hydrate an application. The following content is what I have found…","html":"<p>Before we begin, there is no agreed upon method as of this writing of how to progressively hydrate an application. The following content is what I have found while looking into the topic of progressive hydration, before working with my colleagues to come up with our own way of progressive hydration for our application.</p>\n<p>When hydrating, we are trying to attach interactivity back to the DOM. There are 2 main questions, <em>when</em> and <em>how</em>.</p>\n<h2 id=\"how-do-you-progressively-hydrate\" style=\"position:relative;\"><a href=\"#how-do-you-progressively-hydrate\" aria-label=\"how do you progressively hydrate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How do you progressively hydrate?</h2>\n<p><a href=\"https://github.com/usnews/blog-samples/tree/master/deferHydration\" target=\"_blank\">Example Code</a></p>\n<ol>\n<li>The application splits the codebase into 2 categories, the first category is code that runs on server side, and the second category is code that runs on client side.</li>\n</ol>\n<p>The server-side implementation of the <code class=\"language-text\">deferHydration</code> function performs the <code class=\"language-text\">import</code> synchronously and returns a higher-order component that simply wraps the desired React component. The client-side implementation utilizes the fact that React’s <code class=\"language-text\">dangerouslySetInnerHTML</code> prop is ignored during the hydration step to “match” the hydrated tree. This “match” is important because it prevent React from wiping its server-rendered contents. One of the most common SSR Rehydration pitfalls is where a server-rendered DOM tree gets destroyed and then immediately rebuilt.</p>\n<ol start=\"2\">\n<li>At the client side, this component registers a listener upon instantiation and never updates during additional renders, so the React tree continues to ignore it.\nWhen the listener is triggered, the JavaScript for the deferred component is downloaded and a new React tree is instantiated and hydrated at that DOM node.</li>\n</ol>\n<h2 id=\"when-can-we-rehydrate\" style=\"position:relative;\"><a href=\"#when-can-we-rehydrate\" aria-label=\"when can we rehydrate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>When can we rehydrate?</h2>\n<p>We can rehydrate on hydration triggers. Here are some examples of possible hydration “triggers”.</p>\n<ol>\n<li>view (hydration is triggered when the component scrolls into the viewport)</li>\n<li>never (plain un-hydrated HTML has full functionality and no code is loaded or executed)</li>\n<li>click/hover/focus (hydrate when the user interacts with the component, then repeat the event so React can also respond to it)</li>\n<li>interaction (hydrate the component when the user interacts with the page in any way)</li>\n<li>an arbitrary Promise (custom hydration trigger behaviour)</li>\n</ol>\n<h2 id=\"how-do-you-pass-data-that-event-listeners-need\" style=\"position:relative;\"><a href=\"#how-do-you-pass-data-that-event-listeners-need\" aria-label=\"how do you pass data that event listeners need permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How do you pass data that event listeners need?</h2>\n<p>Some of these interactivity requires data from the app at runtime. For instance, an interactive action of adding a product to cart would likely require the product ID. Depending on your hydration strategy, you may</p>\n<p>Normally, these details can easily be fetched from the redux store (if you are using react with redux) or the component’s state (if you are using a reducer hook instead). With progressive hydration, you’ll need to store that data somewhere so your client side code can access it. After all, doing different work on the server and client would result in the server markup being thrown out by React’s initial reconciliation. To get around this, you may do the following:</p>\n<ol>\n<li>rendering a wrapping <code class=\"language-text\">div</code> around the content on the server and then adding an ID to that element, and setting the <code class=\"language-text\">dangerouslySetInnerHTML</code> prop on the client to the resulting server markup in order to avoid mismatches. Once you have done whatever work on the client to load the necessary components, this hardcoded markup is removed, allowing the React tree to take over.</li>\n<li>pass data via windows object. You can assign the data to window object and then read it in React application.</li>\n<li>pass data via attribute on parent node and then on client-side, find that specific data attribute tag to get your values.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span>\n  <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>react<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">data-react</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>{<span class=\"token punctuation\">\"</span>user<span class=\"token punctuation\">\"</span>:{<span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span>:<span class=\"token punctuation\">\"</span>BTM<span class=\"token punctuation\">\"</span>,<span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span>:<span class=\"token punctuation\">\"</span>example@example.com<span class=\"token punctuation\">\"</span>}}<span class=\"token punctuation\">'</span></span>\n<span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>react-application.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> userData <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>react <span class=\"token operator\">?</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>react<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">hydrate</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App user<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>userData<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span></code></pre></div>\n<p>With these concepts in mind, here is some code examples to demonstrate how it is done. In this code sandbox, we have our normal React application <em>without</em> progressive hydration.</p>\n<iframe src=\"https://codesandbox.io/embed/slider-in-react-gykv0?fontsize=14&hidenavigation=1&theme=dark&view=editor\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"slider-in-react\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n<p>And here is how a progressive hydrated React application <em>could</em> look like.</p>\n<iframe src=\"https://codesandbox.io/embed/slider-in-hydration-0lei1?fontsize=14&hidenavigation=1&theme=dark&view=editor\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"slider-in-hydration\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n<p>Notice the following:</p>\n<ul>\n<li>The following code is the code ran on client-side. We assume that the page’s HTML is generated on the server and the user’s browser (also known as the client-side) receives the generated HTML. The initial HTML is located at <code class=\"language-text\">public/index.html</code>. On reaching client-side, the hydration kick-starts.</li>\n<li>You can see interactivity injected in <code class=\"language-text\">showcase.js</code> within <code class=\"language-text\">useEffect</code>. We go primitive and query for the DOM elements we need to attach event listeners to, all with the help of custom data attributes.</li>\n<li>On tab change, we mount the next React component and give control back to React framework again.</li>\n<li>Event listeners are all attached in <code class=\"language-text\">Showcase</code> page component, which increases the coupling between components.</li>\n</ul>\n<h2 id=\"difference-in-thought-process-when-using-progressive-hydration\" style=\"position:relative;\"><a href=\"#difference-in-thought-process-when-using-progressive-hydration\" aria-label=\"difference in thought process when using progressive hydration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Difference in thought process when using progressive hydration</h2>\n<p>If you choose to embark on progressive hydration, using our current popular front end frameworks may have limited powers. Your application will have to be built with data flow in mind since data will now persist in the DOM that the server-side rendered HTML sent over. You component architecture may also change. In the above progressive hydrated React application CodeSandBox example, we can see that we our <code class=\"language-text\">Tab</code> and <code class=\"language-text\">Card</code> component interactivity had to be added in <code class=\"language-text\">Showcase</code> component instead of their own. We can try to decouple the <code class=\"language-text\">Tab</code> component from <code class=\"language-text\">Showcase</code> component by restructuring the component hierarchy as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Showcase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Tab <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Slider <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Tab</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> <span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> isSubsequentRender <span class=\"token operator\">=</span> <span class=\"token function\">useTabInteraction</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div\n      ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span>\n      suppressHydrationWarning\n      dangerouslySetInnerHTML<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> __html<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Slider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> <span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> modal <span class=\"token operator\">=</span> <span class=\"token function\">useAddToCartInteraction</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">useSliderInteraction</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">useReactRouterLink</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div\n        ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span>\n        suppressHydrationWarning\n        dangerouslySetInnerHTML<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> __html<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>modal<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>I can’t think of any way to decouple <code class=\"language-text\">Card</code> component from <code class=\"language-text\">Showcase</code> component at the moment.</p>\n</blockquote>\n<h2 id=\"closing-note-on-issues-hydrating-a-subtree\" style=\"position:relative;\"><a href=\"#closing-note-on-issues-hydrating-a-subtree\" aria-label=\"closing note on issues hydrating a subtree permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Closing note on issues hydrating a subtree</h2>\n<p>There are still many issues with this progressive hydrated React application. If you have played around with it, you will notice that on navigation back to <code class=\"language-text\">showcase</code> page, the page returns a black. This is because the initial rendered HTML gone after a page re-render and the current client side component does not re-render <code class=\"language-text\">showcase</code> component because it only tackles hydration.</p>\n<p><a href=\"https://github.com/heyjiawei/learnInPublic/blob/master/ssr-rehydration.md\" target=\"_blank\">There are some more issues of building a progressive hydration model</a> upon our current React framework (v17) documented roughly here. Fortunately, the React team is also looking into something similar with <a href=\"https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html\" target=\"_blank\">Server Components</a>.</p>","frontmatter":{"title":"How can partial hydration, progressive hydration be accomplished in React Part 2","date":"May 15, 2021","description":"How can partial hydration, progressive hydration be accomplished in React"}}},"pageContext":{"slug":"/how-can-partial-hydration-progressive-hydration-be-done-in-react-part-2","previous":{"fields":{"slug":"/how-can-partial-hydration-progressive-hydration-be-done-in-react-part-1"},"frontmatter":{"title":"How can partial hydration, progressive hydration be accomplished in React Part 1"}},"next":null}},"staticQueryHashes":["426816048","63159454"]}