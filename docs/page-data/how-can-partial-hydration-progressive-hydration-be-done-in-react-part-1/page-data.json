{"componentChunkName":"component---src-templates-blog-post-js","path":"/how-can-partial-hydration-progressive-hydration-be-done-in-react-part-1","result":{"data":{"site":{"siteMetadata":{"title":"Heyjiawei Blog"}},"markdownRemark":{"id":"8e297282-9e48-57be-959f-cf83a5601f4c","excerpt":"What is hydration in web application To explain hydration we first need some background on how web applications can be created. There are different ways to…","html":"<h1 id=\"what-is-hydration-in-web-application\" style=\"position:relative;\"><a href=\"#what-is-hydration-in-web-application\" aria-label=\"what is hydration in web application permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is hydration in web application</h1>\n<p>To explain hydration we first need some background on how web applications can be created. <a href=\"https://anchall-nigamm.medium.com/rendering-on-the-web-client-side-server-side-static-pre-rendering-6bce7ce6529a\" target=\"_blank\">There are different ways to server HTML to the users browser</a> and these days, developers use front end frameworks like React and Vue to build web user applications.</p>\n<p>Server side rendering and static rendering can both have their content generated before reaching the user’s browser. Upon reaching the user’s browser, these frameworks will kick start the process of “hydration” which then adds interactivity back into the HTML document. You can think of it as attaching event listeners to the HTML content when the content reaches the browser.</p>\n<h1 id=\"what-is-partial-hydration\" style=\"position:relative;\"><a href=\"#what-is-partial-hydration\" aria-label=\"what is partial hydration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is partial hydration</h1>\n<p>I understand partial hydration of a web as hydrating only certain parts of the web application. An example of this would be choosing to hydrate one or a few components only within a page. On the code level, the server and client (the user’s browser) may run different code like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Page.js runs on both server and client</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Page</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Text <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Ads <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Ads.js runs on both server and client</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Ads</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Here are some ads<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span> div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Text.server.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Click here\n      <span class=\"token operator\">&lt;</span>button onclick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>window<span class=\"token punctuation\">.</span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NOPE'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token constant\">BUTTON</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span> button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// On client side, Text component runs as follows.</span>\n<span class=\"token comment\">// This component's hydration is skipped.</span>\n<span class=\"token comment\">// Text.csr.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div dangerouslySetInnerHTML<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">''</span><span class=\"token punctuation\">}</span> suppressHydrationWarning <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this example, we see that <code class=\"language-text\">&lt;Ads /&gt;</code> component is hydrated whereas <code class=\"language-text\">&lt;Text /&gt;</code> component hydration ends at it’s root <code class=\"language-text\">&lt;div&gt;</code>. This will cause <code class=\"language-text\">&lt;Text /&gt;</code> component to not get hydrated and thus, no interactivity will be attached to them. This means they will not re-render when new props are passed into them. They will not be interactive so if you clicked the button rendered within within Text component, nothing would happen.</p>\n<h1 id=\"what-is-progressive-hydration\" style=\"position:relative;\"><a href=\"#what-is-progressive-hydration\" aria-label=\"what is progressive hydration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is progressive hydration</h1>\n<p>When the page reaches the user’s browser, the hydration phase kicks in. During this hydration phase, all components that require interactivity are all hydrated during this phase. Just imagine 100 components being hydrated all at once, on page load. The idea of Progressive hydration suggest spreading out this huge hydration task so as to reduce the huge initial CPU activity when the page loads.</p>\n<p><figure class=\"gatsby-resp-image-figure\" style=\"\">\n    <span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 650px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/a716698abd37df826cbdf4f901789d41/f6f78/flatten-the-curve.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 60.122699386503065%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20width=\\'400\\'%20height=\\'240\\'%20viewBox=\\'0%200%20400%20240\\'%20preserveAspectRatio=\\'none\\'%3e%3cpath%20d=\\'M103%2033c-6%205-12%2022-18%2055a10459%2010459%200%2001-9%2056c-4%2027-9%2036-22%2040-7%201-8%204-3%204a175%20175%200%200094-44l10-9%203%2010c8%2025%2014%2031%2032%2033l20%203%2045%202a1530%201530%200%2001119%204l2-1h2c0-1-8-2-22-2-21%200-22%200-32-3-29-9-46-17-64-34-21-19-28-25-43-30s-18-6-29-5c-14%201-17%203-26%2013l-7%206-4-15-17-66c-8-17-21-25-31-17m-56%202l-4%2011%202-3c3-7%203-6%203%2012l-3%20151%201%203h161a851%20851%200%2001166%200c2%200%201-1-7-4a1200%201200%200%2001-159%203H46l1-20a20221%2020221%200%20003-146l2%204-2-10-2-4-1%203m59-1l-5%204c-3%203-10%2025-13%2042a3675%203675%200%2001-10%2058c-5%2033-8%2040-18%2045l-5%203%204-1c27-3%2067-23%2087-43l8-8-2-6a461%20461%200%2001-11-48l-4-13c-6-26-20-40-31-33m76%2080c-7%202-13%206-22%2015l-4%205%203%208c7%2022%2014%2031%2027%2033a671%20671%200%200127%204%2029161%2029161%200%200145%202%20371%20371%200%200161%202h7c-29-8-48-18-66-34-22-21-30-26-48-32-9-3-22-5-30-3\\'%20fill=\\'%23d3d3d3\\'%20fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n  ></span>\n  <picture>\n          <source\n              srcset=\"/static/a716698abd37df826cbdf4f901789d41/94563/flatten-the-curve.webp 163w,\n/static/a716698abd37df826cbdf4f901789d41/647a8/flatten-the-curve.webp 325w,\n/static/a716698abd37df826cbdf4f901789d41/c1dc5/flatten-the-curve.webp 650w,\n/static/a716698abd37df826cbdf4f901789d41/3b46e/flatten-the-curve.webp 932w\"\n              sizes=\"(max-width: 650px) 100vw, 650px\"\n              type=\"image/webp\"\n            />\n          <source\n            srcset=\"/static/a716698abd37df826cbdf4f901789d41/222b7/flatten-the-curve.png 163w,\n/static/a716698abd37df826cbdf4f901789d41/ff46a/flatten-the-curve.png 325w,\n/static/a716698abd37df826cbdf4f901789d41/a6d36/flatten-the-curve.png 650w,\n/static/a716698abd37df826cbdf4f901789d41/f6f78/flatten-the-curve.png 932w\"\n            sizes=\"(max-width: 650px) 100vw, 650px\"\n            type=\"image/png\"\n          />\n          <img\n            class=\"gatsby-resp-image-image\"\n            src=\"/static/a716698abd37df826cbdf4f901789d41/a6d36/flatten-the-curve.png\"\n            alt=\"Flatten the curve. Does it sound familiar? \"\n            title=\"Flatten the curve. Does it sound familiar? \"\n            loading=\"lazy\"\n            style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n          />\n        </picture>\n  </a>\n    </span>\n    <figcaption class=\"gatsby-resp-image-figcaption\">Flatten the curve. Does it sound familiar? </figcaption>\n  </figure></p>\n<p>Here’s the talk about it in Google IO 2019:</p>\n<div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; margin-bottom: 1.0725rem\" > <iframe src=\"https://www.youtube.com/embed/k-A2VfuUROg\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\" position: absolute; top: 0; left: 0; width: 100%; height: 100%; \"></iframe> </div>\n<p>Conceptually, here’s what will happen:</p>\n<ol>\n<li>The Server renders HTML string (Rendered UI) and adds it into HTML</li>\n<li>The Server serializes data for UI and adds it into HTML <code class=\"language-text\">&lt;script&gt;</code> tag</li>\n<li>Only after bundle.js finished loading and executing then UI will be interactive</li>\n</ol>\n<h1 id=\"so-how-do-you-skip-react-hydration\" style=\"position:relative;\"><a href=\"#so-how-do-you-skip-react-hydration\" aria-label=\"so how do you skip react hydration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>So how do you skip React hydration?</h1>\n<p>When you use <code class=\"language-text\">dangerouslySetHTML</code> as an empty string in a <code class=\"language-text\">&lt;div&gt;</code> (or dom element), it stops react from walking down the tree. So on server side, if we return the rendered DOM components. We can use <code class=\"language-text\">dangerouslySetHTML</code> to signal to react to stop hydrating this subtree.</p>\n<p>Here is a code example of how we can skip the initial hydration:</p>\n<iframe src=\"https://codesandbox.io/embed/cocky-goldberg-wb3s2?fontsize=12&theme=dark&view=editor\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"cocky-goldberg-wb3s2\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n<p><code class=\"language-text\">public/index.html</code> mimics the server rendered HTML. On client side, we need to ensure that the DOM structure matches. In this instance, <code class=\"language-text\">App</code> returns a <code class=\"language-text\">&lt;div&gt;</code>, so <code class=\"language-text\">Counter</code> have to match up with rendered DOM structure within <code class=\"language-text\">&lt;div&gt;</code>.</p>\n<p>Do note that when you set a component to skip rehydration, all its children will follow and skip hydration too.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// On server side</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Container</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Page</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Container<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Text <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Text <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Text <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Container<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// On Client side, you will not be able to reach Text.</span>\n<span class=\"token comment\">// Passing in children will not cause this component to re-render</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Container</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div suppressHydrationWarning dangerouslySetInnerHTML<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> __html<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the next blog post, I will show some experiments and strategies of progressive hydration.</p>","frontmatter":{"title":"How can partial hydration, progressive hydration be accomplished in React Part 1","date":"May 14, 2021","description":"How can partial hydration, progressive hydration be accomplished in React"}}},"pageContext":{"slug":"/how-can-partial-hydration-progressive-hydration-be-done-in-react-part-1","previous":{"fields":{"slug":"/block-user-from-leaving-page-on-single-page-app"},"frontmatter":{"title":"How to block user from leaving a page on a single page app"}},"next":{"fields":{"slug":"/how-can-partial-hydration-progressive-hydration-be-done-in-react-part-2"},"frontmatter":{"title":"How can partial hydration, progressive hydration be accomplished in React Part 2"}}}},"staticQueryHashes":["426816048","63159454"]}