{"componentChunkName":"component---src-templates-blog-post-js","path":"/chrome-devtools-element-and-console-panel-tips","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"Heyjiawei Blog"}},"markdownRemark":{"id":"0147d227-648e-5b8f-a175-a9727c5ca004","excerpt":"At the time of writing, I am using Stable Chrome 80.  I started seriously digging into Chrome Devtools a few months back. This was partially caused by 2 events‚Ä¶","html":"<p>At the time of writing, I am using Stable Chrome 80. </p>\n<p>I started seriously digging into Chrome Devtools a few months back. This was partially caused by 2 events, watching my colleague debugging on Chrome Devtools in real time and having tasked to benchmark our site‚Äôs performance.</p>\n<p>Since every web developer uses devtools, not necessary Chrome Devtools, I think it will be meaningful to share an encapsulation of all the things that I learnt which I think would benefit others if they know it too. So here is the list.</p>\n<h1 id=\"getting-that-disappearing-element\" style=\"position:relative;\"><a href=\"#getting-that-disappearing-element\" aria-label=\"getting that disappearing element permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getting that disappearing element</h1>\n<p>I‚Äôm sure you have seen disappearing elements that only pops up on hover. At some point, you will probably need to inspect them. Here are 2 ways to do so:</p>\n<ol>\n<li>You may use the <a href=\"https://developers.google.com/web/tools/chrome-devtools/javascript/breakpoints#dom\" target=\"_blank\">DOM breakpoint</a>. It looks like <a href=\"https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/dom-change-breakpoint.png\" target=\"_blank\">this</a></li>\n<li>You may freeze script execution (This is my preferred choice).\nGo to sources panel and point your cursor at the disappearing element. When it appears, press <code class=\"language-text\">F8</code>. This will cause the debugger mode to start and your script will be paused. </li>\n</ol>\n<p>Take note that you have to be at the <strong>Sources panel</strong> for you to be able to freeze the script. When the script is freezed, all interactions managed by javascript will be paused so you can inspect the element with ease, if it is managed with JavaScript. If this doesn‚Äôt work, the element is likely toggled with CSS. You can then force it to appear by activating pseudo classes üëá</p>\n<h1 id=\"activating-pseudo-classes\" style=\"position:relative;\"><a href=\"#activating-pseudo-classes\" aria-label=\"activating pseudo classes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Activating pseudo classes</h1>\n<p>Say you activate the pseudo class of an element, you can trigger this effect by clicking the element you wish to inspect in Elements panel, followed by clikcing the Styles tab, then click the <code class=\"language-text\">:hov</code> button. It looks like <a href=\"https://developers.google.com/web/tools/chrome-devtools/css#pseudostates\" target=\"_blank\">this</a>.</p>\n<h1 id=\"interacting-with-dom-element-on-console-panel\" style=\"position:relative;\"><a href=\"#interacting-with-dom-element-on-console-panel\" aria-label=\"interacting with dom element on console panel permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interacting with DOM element on console panel</h1>\n<p>Did you know you can interact with the DOM elements you clicked in Element panel on console panel? </p>\n<p>You can do so by typing in these commands in console panel <code class=\"language-text\">$0</code>, <code class=\"language-text\">$1</code>, <code class=\"language-text\">$2</code>, <code class=\"language-text\">$3</code> and <code class=\"language-text\">$4</code> and they will return the historical reference to the last 5 DOM elements you clicked. <code class=\"language-text\">$0</code> gives you the most recently selected DOM element and <code class=\"language-text\">$1</code> gives you the second most recently selected DOM element and so on. With this command, you can now mutate the DOM elements you have ‚Äúselected‚Äù in Elements panel.</p>\n<p>In fact, there are many other ways to <a href=\"https://developers.google.com/web/tools/chrome-devtools/console/utilities#queryselector\" target=\"_blank\">select DOM elements in the console panel</a>.</p>\n<h1 id=\"returning-the-most-recently-evaluated-expression\" style=\"position:relative;\"><a href=\"#returning-the-most-recently-evaluated-expression\" aria-label=\"returning the most recently evaluated expression permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Returning the most recently evaluated expression</h1>\n<p>Another utility I find useful at times is the <code class=\"language-text\">$_</code>. It returns you the most recently evaluated expression. I use this often with <code class=\"language-text\">String.prototype.split()</code> when I wish to do multiple quick and dirty secondary evaluations on my evaluated expression.</p>\n<h1 id=\"hiding-messages-on-console\" style=\"position:relative;\"><a href=\"#hiding-messages-on-console\" aria-label=\"hiding messages on console permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hiding messages on console</h1>\n<p>Sometimes we have too many console log messages appearing and we would like to focus on those on a few. We can use the filter bar in console panel to filter the messages we want. But did you know we can do the inverse too? We can filter out the messages we don‚Äôt want by prepending <code class=\"language-text\">-</code> at the front to exclude them. For example, you have a console warning printed on every <code class=\"language-text\">index.js:135</code>, you can type <code class=\"language-text\">-index.js:135</code> into the filter bar in console panel to filter out messages that contain <code class=\"language-text\">index.js:135</code>. </p>\n<p>You can have multiple commands in your filter bar. Just add a space in between! So if you wish to filter out both lines <code class=\"language-text\">index.js:135</code> and <code class=\"language-text\">index.js:138</code>, you can type <code class=\"language-text\">-index.js:135 -index.js:138</code> into the filter bar.</p>\n<p>You may also filter by <a href=\"https://developers.google.com/web/tools/chrome-devtools/console/reference#url\" target=\"_blank\">URL</a></p>\n<h1 id=\"debugging-iframes-or-other-javascript-context\" style=\"position:relative;\"><a href=\"#debugging-iframes-or-other-javascript-context\" aria-label=\"debugging iframes or other javascript context permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Debugging Iframes or other JavaScript context</h1>\n<p>By default, Chrome Devtool Console panel‚Äôs JavaScript context dropdown is set to <code class=\"language-text\">top</code> and it represents the main document‚Äôs browsing context, which is the environment the browser displays it‚Äôs DOM. It looks like <a href=\"https://developers.google.com/web/tools/chrome-devtools/console/images/jscontext.png\" target=\"_blank\">this</a>.</p>\n<p>So suppose your page has embedded an <code class=\"language-text\">&lt;iframe&gt;</code>, <code class=\"language-text\">top</code> would refer to your page‚Äôs JavaScript context. To select the <code class=\"language-text\">&lt;iframe&gt;</code> JavaScript context, you would first need to change console panel‚Äôs JavaScript context dropdown to point your your <code class=\"language-text\">&lt;iframe&gt;</code> browsing context before you can run any JavaScript to mutate the DOM in <code class=\"language-text\">&lt;iframe&gt;</code>. </p>\n<p>Here are the <a href=\"https://developers.google.com/web/tools/chrome-devtools\">docs and reference</a> I read to learn how to use Chrome Devtools. </p>","frontmatter":{"title":"Chrome Devtools Tips and tricks Part 1","date":"March 27, 2020","description":"This post will cover some tips and tricks on Chrome Devtools Element and Console panel"}}},"pageContext":{"slug":"/chrome-devtools-element-and-console-panel-tips","previous":{"fields":{"slug":"/learning-markdown"},"frontmatter":{"title":"Learning Markdown"}},"next":null}}}