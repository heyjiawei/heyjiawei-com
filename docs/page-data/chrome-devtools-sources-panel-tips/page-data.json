{"componentChunkName":"component---src-templates-blog-post-js","path":"/chrome-devtools-sources-panel-tips","result":{"data":{"site":{"siteMetadata":{"title":"Heyjiawei Blog"}},"markdownRemark":{"id":"ce720460-3cd8-57b8-9577-c7fd1a5ead00","excerpt":"At the time of writing, I am using Stable Chrome 80.  Sources panel allows you to look at the code you sent to the browser. It could be mangled code or if you‚Ä¶","html":"<p>At the time of writing, I am using Stable Chrome 80. </p>\n<p>Sources panel allows you to look at the code you sent to the browser. It could be mangled code or if you have integrated your source code with Chrome devtool‚Äôs <a href=\"https://developers.google.com/web/tools/chrome-devtools/workspaces\" target=\"_blank\">workspaces</a>, you would be able to see your own code and the code you sent to the browser on this panel.</p>\n<p><em>As I do not use workspace, this article would not contain any information about it. However, workspace is worth checking out if you wish to stop switching between editor and browser application while developing your app.</em></p>\n<p>I use Sources panel when I have to debug large applications whose code base I am unfamilar with. While the debugger is powerful, it can be excessive. I would use it to pin point the general area of where the bug lies, or use its step through feature to get a sense of how the application flows, then use console log for fine-grained debugging. Additionally, the debugger frequently freezes for me so I don‚Äôt rely on it in my day-to-day debugging. Nevertheless, it has proved useful on many accounts and here are the things I would share about it.</p>\n<h2 id=\"the-debugger-keyword\" style=\"position:relative;\"><a href=\"#the-debugger-keyword\" aria-label=\"the debugger keyword permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The debugger keyword</h2>\n<p>If you wish to check when or whether a ‚Äúpath‚Äù is executed, and you have access to the source code, you can add the keyword <code class=\"language-text\">debugger;</code> in your source code. On Chrome devtools (I can‚Äôt say for the other browsers since I don‚Äôt know whether this trick works on them), the debugger would pause on the line of this keyword if it lies in its execution path.</p>\n<h2 id=\"blackbox-scripts\" style=\"position:relative;\"><a href=\"#blackbox-scripts\" aria-label=\"blackbox scripts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Blackbox scripts</h2>\n<p>When stepping through your code, the debugger might bring you into your polyfills, frameworks or any third party libraries you use. To prevent that, you can blackbox these script(s). You can black box scripts in the <a href=\"https://developers.google.com/web/tools/chrome-devtools/javascript/reference#blackbox\" target=\"_blank\">following ways</a>:</p>\n<ol>\n<li>Blackbox a script from the editor pane</li>\n</ol>\n<p>When you are in a script that you wish to blackbox, right-click anywhere within the source of the script. On the context menu, select Blackbox script. Doing so would blackbox this particular script you are in.</p>\n<ol start=\"2\">\n<li>Blackbox scripts that match a regex expression</li>\n</ol>\n<p>Sometimes frameworks and libraries may span several scripts. We can capture them with regex patterns. Press <code class=\"language-text\">Ctrl</code> + <code class=\"language-text\">Shift</code> + <code class=\"language-text\">p</code> to open up the command menu. Type in <code class=\"language-text\">blackbox</code> you would see <code class=\"language-text\">[Settings] Show Blackbox</code>. Press enter and you be able to blackbox a single script or pattern of scripts. When you are done, you can press <code class=\"language-text\">Esc</code> to return to Sources panel.</p>\n<h2 id=\"run-repl-on-paused-line-of-code\" style=\"position:relative;\"><a href=\"#run-repl-on-paused-line-of-code\" aria-label=\"run repl on paused line of code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Run REPL on paused line of code</h2>\n<p>When you are paused on a line of code, you can still use the browser‚Äôs Read-Eval-Print Loop (REPL). At sources panel, press <code class=\"language-text\">Esc</code> and this would bring up console in the <a href=\"https://developers.google.com/web/tools/chrome-devtools/customize#drawer\" target=\"_blank\">drawer</a>. By default, Chrome Devtool Console drawer‚Äôs JavaScript context dropdown is set to <code class=\"language-text\">top</code> and it represents the main document‚Äôs browsing context, which is the environment the browser displays it‚Äôs DOM. So you can <code class=\"language-text\">console.log</code> out values of variables that have been executed, before the script was paused. </p>\n<h2 id=\"snippets\" style=\"position:relative;\"><a href=\"#snippets\" aria-label=\"snippets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Snippets</h2>\n<p><a href=\"https://developers.google.com/web/tools/chrome-devtools/javascript/snippets\" target=\"_blank\">Snippets</a> are scripts that are stored on Chrome Devtools. They have access to the page‚Äôs JavaScript context. You can use them when you find yourself repeating a code on your console. You can‚Äôt pass in arguments into snippets though. Here are some ways to <a href=\"https://bgrins.github.io/devtools-snippets/\" target=\"_blank\">creatively use snippets</a>.</p>\n<p>In this post, I briefly touched on the command menu (Press <code class=\"language-text\">Ctrl</code> + <code class=\"language-text\">Shift</code> + <code class=\"language-text\">p</code>) and drawers (Press <code class=\"language-text\">Esc</code>). The command menu provides you a list of features that Chrome Devtools offers so if you wish to explore Chrome Devtools features, you can do so from this menu. In fact, some of my feature discovery were made from scanning through this menu! Many features are tucked away in drawers as well so do look into them. One of them is code coverage, which shows how much of the code you sent to the browser is actually ran. </p>\n<p>That‚Äôs it for Source panel. Thanks for reading üëã</p>","frontmatter":{"title":"Chrome Devtools tips and tricks Part 2","date":"March 28, 2020","description":"This post will cover some tips and tricks on Chrome Devtools Sources panel"}}},"pageContext":{"slug":"/chrome-devtools-sources-panel-tips","previous":{"fields":{"slug":"/chrome-devtools-element-and-console-panel-tips"},"frontmatter":{"title":"Chrome Devtools tips and tricks Part 1"}},"next":{"fields":{"slug":"/about-uri-scheme"},"frontmatter":{"title":"about URI Scheme"}}}},"staticQueryHashes":["426816048","63159454"]}